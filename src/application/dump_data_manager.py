import logging
from datetime import UTC, datetime
from typing import Any

from src.application.interfaces.ai_generation_interface import AIGenerationInterface
from src.application.interfaces.dump_data_interface import DumpDataInterface
from src.types.documents import FaqCategory, FaqDocument
from src.types.user import User


class DumpDataManager:
    """
    Manager for dumping data into the database.

    This class coordinates the process of reading data, generating embeddings,
    and storing the data in the database.
    """

    def __init__(
        self,
        dump_data_repository: DumpDataInterface,
        ai_repository: AIGenerationInterface,
    ):
        """
        Initialize the manager with required repositories.

        Args:
            dump_data_repository: Repository for dumping data into the database.
            ai_repository: Repository for AI operations like generating embeddings.
        """
        self.dump_data_repository = dump_data_repository
        self.ai_repository = ai_repository
        self.logger = logging.getLogger(__name__)

    async def dump_data(self, base_data: list[dict[str, Any]]) -> None:
        """
        Process and dump FAQ documents with their embeddings.

        This function:
        1. Reads FAQ documents from base data
        2. Generates embeddings for each document
        3. Creates FaqDocument instances
        4. Inserts the documents into the database

        Args:
            base_data: List of dictionaries containing FAQ document data.
                     Each dict should have: title, link, text, category

        Raises:
            Exception: If there's an error during the process.
        """
        try:
            self.logger.info(f"Starting to process {len(base_data)} FAQ documents")

            # Process each document and generate embeddings
            faq_documents = []
            for doc in base_data:
                # Generate embedding for the document text
                embedding_response = await self.ai_repository.generate_embeddings(
                    doc["text"]
                )

                # Create FaqDocument instance
                faq_document = FaqDocument(
                    id=None,  # ID will be generated by the database
                    title=doc["title"],
                    link=doc["link"],
                    text=doc["text"],
                    category=FaqCategory(doc["category"]),
                    embedding=embedding_response.embedding.vector,
                )
                faq_documents.append(faq_document)

                self.logger.debug(f"Generated embedding for document: {doc['title']}")

            # Dump all documents into the database
            await self.dump_data_repository.dump_faq_documents(faq_documents)
            await self.create_test_user()
            self.logger.info("Successfully completed data dump process")

        except Exception as e:
            self.logger.error(f"Error in dump_data process: {str(e)}")
            raise

    async def create_test_user(self) -> None:
        """
        Create a test user in the database.

        This function creates a test user with the following credentials:
        - Email: test@example.com
        - Password: test123 (hashed)
        - Username: Test User

        Raises:
            Exception: If there's an error during the process.
        """
        try:
            self.logger.info("Creating test user")

            # Create test user
            test_user = User(
                id=None,  # ID will be generated by the database
                email="test@example.com",
                password_hash="$2b$12$LQv3c1yqBWVHxkd0LHAkCOYz6TtxMQJqhN8/LewdBAQHxJ5J5QK8y",  # test123
                user_name="Test User",
                created_at=datetime.now(UTC),
                updated_at=datetime.now(UTC),
            )

            # Dump user into the database
            await self.dump_data_repository.dump_user_data([test_user])
            self.logger.info("Successfully created test user")

        except Exception as e:
            self.logger.error(f"Error creating test user: {str(e)}")
            raise
